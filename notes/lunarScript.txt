A given Textxxxx.DAT is copied directly into memory location 0x260000 when the corresponding scene is loaded.

The first 0x800 bytes of these files consist of a sequence of 16-bit pointers (Up to 1024).  Each pointer points to the beginning of a sequence of actions that should occur.  These sequences occur later on in the text file and may in turn contain pointers that jump to other sections of the file.  If a 16-bit pointer is 0x0000, obviously it is not used by the game.  Some pointers are invalid in the files, they extend beyond 64kB (0xFFFF).  This is a limitation on the Saturn versions as there is something else stored in that memory region in the game.  The iOS version does not appear to have this limitation.

When talking to a person or when an event occurs, a value is read from someplace (i havent bothered to locate the origin  of this because I assume it is not relevant for translating, its more game-mechanic related). This value is then multiplied by 2 to obtain the offset into Textxxxx.DAT for the Top-Level pointer. This happens around 0x060BA1FC when running the SSS Saturn game.

The value of the pointer is then read, and 0x260000 is added to it to obtain the offset into ram of a particular sequence  of events to be executed.

The focus of this document is for text dump/insertion.  (Which is why i dont bother to fully trace everything.)

Sequence Format:
Subroutine, arguments, Subroutine, arguments, ..., Final Subroutine, arguments
At the end of each executed subroutine, a global variable is checked to see if it is the final one to be run.

Sequences contain subroutines, the addresses of which are hard-coded at locations 060F1D10 to 060f1eff
They are referenced by a 16-bit number.  Here is a high level summary:

Hex     x4      Address
0x0002 0x0008 - 060BA9C0 <-- Text Drawing subroutine
0x0003 0x000C - 060BB830 <-- Unconditional Jump in Script File
0x0004 0x0010 -          <-- Unconditional Jump in Script File
0x0005 0x0014 - 060BB92A <-- Subroutine usually called last.  Seems to signify end of the current script sequence read.
0x0007 0x001C - 060BB986 <-- Select between 2 options.
0x0008                   <-- Another flag like 9 ???
0x0009 0x0024 - 060BBAA0 <-- Plays a role in altering text output selection by setting a bit in the 0x21F8xx region.
0x000A 0x0028 - 060BBADA <-- Plays a role in altering text output selection by clearing a bit in the 0x21F8xx region.
0x000B 0x002C - 060BBB1C <-- Conditional True Jump in Script File
0x000C 0x0030 - 060BBB94 <-- Conditional False Jump in Script File
0x0010 0x0040 -          <-- Conditional Jump in Script File with byte parameters.
0x0011                   <-- Jump in Script File of some sort.
0x0016                   <-- Conditional Jump in Script File with byte parameters.
0x0018 0x0060 -
0x001A 0x0068 -
0x001F 0x007C -          <-- Obtain an item (argument specifies the item).
0x0021 0x0084 -
0x0023 0x008C -
0x0025 0x0094 -
0x0026 0x0098 -          <-- Called when entering/exiting areas.  Has something to do with loading the start pointer for newly loaded TEXTxxx.DAT files
0x0027 0x009C -          <-- Called when entering/exiting cow shed
0x0029 0x00A4 -
0x002A 0x00A8 -          <-- Called when entering/exiting dyne monument area
0x002C 0x00B0 -
0x002D 0x00B4 -          <-- Plays one of the movies.  First argument byte identifies the movie to be played.
0x002E 0x00B8 -          <-- Displays a shop menu, shop depends on argument.
0x002F 0x00BC - 060BD3BA <-- Restores HP, flashes screen (For example, Althena statue).
0x0030 0x00C0 -
0x0031 0x00C4 -          <-- Something to do with the cow in the shed?
0x0032 0x00C8 -          <-- Something to do with the cow in the shed?
0x0033 0x00CC -
0x0034 0x00D0 -
0x0038 0x00E0 -          <-- Something to do with the cow in the shed?
0x003A 0x00E8 -
0x003C 0x00F0 -
0x003D 0x00F4 -
0x003E 0x00F8 -          <-- Called when entering/exiting dyne monument area
0x003F 0x00FC -
0x0040 0x0100 -
0x0041 0x0104 -
0x0042 0x0108 -          <-- Unconditional Jump or End script read
0x0045 0x0114 -          <-- Called when entering/exiting cow shed
0x0047 0x011C -          <-- Called when entering/exiting cow shed
0x0052 0x0148 - 060BD8D4 <-- ?? Unknown - Blue haired boy at bottom of Burg ??  1 short argument
0x0053 0x014C - 060BD92C <-- ?? Precedes voice playback ??  No arguments
0x0054 0x0150 - 060BD96A <-- voice playback? Yabause crashes on this.  No Arguments
0x005A 0x0168 - 060BD56E <-- ?? Precedes call to 0x0053 ??
0x005D                   <-- Not in SSS, Present in SSSC




Detailed Summary (Mostly Traced)
=================================


Hex       Aruments


0x0002    Variable.  Text data and text escape codes are located here.  Ends with the value 0xFFFF.
Esc
Code   Branch Target Address
===============================
F0xx   0x60BAE6E -  ???
F080   0x60BAE6E - Not sure how this could ever execute the way the code is written.
F1xx   0x60BAE6E - These map to specific kanji, linked to the lower byte.  Used in menus.
F4xx   0x60BAE6E -  ???
F5xx   0x60BAE6E -  ???
F6xx   0x60BAE6E - Prints kanji to a text box (kanji printed depends on lower byte), screen fades to black, and you appear in an area.  So likely tied to something with the current scenario, otherwise you end up in the wrong place after the screen fades.  Used in menus.
F8xx   0x60BAE14 - Pause between text printing.  The lower byte dicates the pause.  Eyeballing it, it seems like full scale, 0xFF is about 4 seconds, so something like 15ms per digit.
F9xx   0x60BADAA - Space, 2nd byte is # pixels
FAxx   0x60BAE3A - Character Portrait (Left side). Mapping depends on scene.  Portrait code of FA00 removes.
FBxx   0x60BAE54 - Character Portrait (Right side) Mapping depends on scene.  Portrait code of FB00 removes.
FCxx   0x60BADC4 - FC03 Called before displaying a location name (Burg Village), FC00 follows, then FFFF
FFxx   0x60BAC20 - Second byte of FF is: 00-wait for button press 01-clear and reset text box cursor, 02 newline, 03 close dialog box and any portraits, FF end of dialog

RTS performed if no match with the above codes


0x0003    1 16-bit offset of where to go to next.
            Place to jump: (Offset Byte Address = 0x260000 + 2*Arg1_WdOffset.  
            Now Read the wd at this address, mutiply by 2 and add to 0x260000.  This is where you jump to!


0x0005    No argument.  Sets global end of script flag if 0x060F95A0 was previously set to 0.  Otherwise does something            else.  Havnet run across any actual usage yet, but by plugging in some values with the yabause debugger,
         It will perform the following:  
         (*0x060F95A0)--;
         *0x060F956C = 0x060F9570 + (*0x060F95A0)*4
         *0x060F95A2 = 0x060F9590 + (*0x060F95A0)*2 
         Not sure entirely how this works
         Looks like it updates the file pointer and does something with whatever is at 0x060F95A2
         If called repeatedly 0x060F95A0 eventually becomes 0 and then the rts at 060BB938 is called which results
         in the end of the script.

0x0007    4 Argument #1:  Offset to use to jump if bottom option is selected.
                          Otherwise the script sequence continues linearly past this portion.
            Argument #2:  0000  (Null terminator)
            Argument #3:  Text String Ending in FFFF  (Top Option)
            Argument #4:  Text String Ending in FFFF  (Bottom Option)

0x0009    2 Argument #1:  Bit offset from 0x21F800 to set
            Argument #2:  0000  (Null terminator of subroutine)

0x000A    2 Argument #1:  Bit offset from 0x21F800 to clear
            Argument #2:  0000  (Null terminator of subroutine)

0x000B    3 Argument #1:  Word Offset to the offset value to potentially jump to.
                          Place to jump: (Offset Byte Address = 0x260000 + 2*Arg1_WdOffset.  
                          Now Read the wd at this address, mutiply by 2 and add to 0x260000.  This is where you jump to!)
            Argument #2:  Bit offset from 0x21F800 to check (1 = jump file pointer to word offset, 0 = dont jump.  
                          File pointer will move onto the subroutine that follows this one)
            Argument #3:  0000  (Null terminator of subroutine)

            Example of sequence when talking next to man next to bridge in Burg
            #1: 0133, 0132, 0130, 012F, 012E
            #2: 0020, 000B, 0009, 0007, 0003
            #3: Always 0000 to signify end of arguments
            Last one has an offset of where to jump to next in the file. 0x012E*2 = 0x025C
            Value at 0x025C in the file is 0x26E6; 0x26E6*2 = 4DCC, the next offset

Note: The 0x21F8xx region appears to hold state data for the current scene.


0x000C    3 Argument #1:  Word Offset to the offset value to potentially jump to.
                          Place to jump: (Offset Byte Address = 0x260000 + 2*Arg1_WdOffset.  
                          Now Read the wd at this address, mutiply by 2 and add to 0x260000.  This is where you jump to!)
            Argument #2:  Bit offset from 0x21F800 to check (0 = jump file pointer to word offset, 1 = dont jump.  
                          File pointer will move onto the subroutine that follows this one)
            Argument #3:  0000  (Null terminator of subroutine)
Note: This is just the opposite of 0x000B





Partially Verified By Trace
===============================
0x0008    Two short arguments. (Or possibly argument list terminated with 0x0000 ?)

0x0010   (Called when Entering cave)  This is a jump
  0010  03E6  (Then jumped to 0x267B12)
  Formula:  0x03E6*2 = 0x7CC
            Then value at 0x7CC is read, which is 0x3D89
            Next location is 0x260000 + (0x3D89*2) = 0x267B12
            Appears to be the same thing as control code 0x0003

0x0018  One short argument.

0x001A  Two short arguments.  (Something to do with items in chests?)
001A 1571 0000
001A 1570 0000

060bc22c

267236
0x001F  One short argument, argument is item obtained (1 byte) followed by 0x00.

0x001F  0100 (one short argument)  Given a knife (text shows up top)
  001F  1900 (one short argument)  Given a sling (text shows up top)
  001F  8600 (one short arg)  Given fire ring
  001F  A400  chimera wing
  001F  9C00  healing herb
  001F  9E00  starlight
  001F  A000  angel tear

0x0021  Two short args

0x0023    One short argument.

0x0025    One short argument.
  0025 1400

0x0026    3 arguments, or list terminating in ff00 ???
  0026 0006 0401 ff00  (New scene)
       0003 0601 ff00

0x0027    If the first byte is zero, there are 6 arguments.
          Otherwise there is 1 argument

0x0029    One short argument.

0x002A    One short argument.

0x002C    Two short arguments.

0x002D    Two short arguments.  (Or Possibly argument list terminated with 0xFF00 ?)  Maybe selects a movie to play, not sure?

0x002E    Two short arguments.
  002E 0100  Weapon Shop
  002E 0200  Potion Shop

0x002F    No arguments. Related to Altena statue. Calls some routine then theres a green flash.
          Probably just restores HP.  [Assumption, Did not verify with debugger]

0x0030    One short argument.

0x0031    One short argument.

0x0032    No arguments.

0x0033    One short argument.  (Or Possibly argument list terminated with 0x0000 ?)

0x0034    Appears to be 7 arg right before the first ramus movie? Otherwise 1 arg. Need to investigate further.
  0034    0B07 0111 3600 0100 0000 FF08 0500
  0034    0771
  0034    076E
  0034    0715


0x0038    Variable number of short arguments.  Terminates in 0xF900  (or xxF9).

0x003A    No arguments.

0x003C    No arguments.

0x003D    Argument list terminated with 0xFFFF

0x003E    Two short arguments.

0x003F    No arguments.

0x0040    No arguments.

0x0041    One short argument.

0x0045    One short argument. (Called when Entering/Exiting houses)

0x0047    One short argument. (Called when Entering/Exiting houses)

0x0052    One short argument.

0x0053    No arguments.

0x0054    No arguments.

0x005A    1 Short Argument split into Two bytes.  First byte is ???.  Second byte is ???
          Not sure what this is for yet.


Global Variables
=================
0x060f9568 - Global constant 0x260000, the start of the script in RAM.

0x060F956C - a global pointer to the location in ram that the 16-bit subroutine/argument script values are being read from.  Calling the subroutines autoincrements this global pointer accordingly.

0x060F95A0 - Global value that gets read if subroutine 0x0005 is called.  If the value is zero, then 0x060F95A8
             is set equal to 1 (true), otherwise something else is executed (not yet decoded).

0x060F95A4 - Holds Hex identfier of currently executing subroutine.

0x060F95A8 - global boolean variable.  When 0, the script sequence is not finished.  When 1 (or any non-zero value for that matter), it is finished.


0x060F9500
60F95A2
0x60F9534
060F95BA
060F95BC
060F9546
60F9548

=================================
Subroutine  060BB830 - Updates script pointer using next 16-bit argument
=================================
Increment script pointer (0x60F956C) by 2 bytes (1 Word location)
Read the value at that location (Val#1a), which is a Word offset.  Then multiply by 2 (Val#1b) to get a Byte offset.
Add 0x260000 to this number (Val#1b) to obtain the RAM byte offset.
Read the 16-bit value at this new RAM location. (Val#2a)

IF the value (Val#2a) is 0{
   ???
    ?Any reason to get here other than an error?
   ???
}
ELSE{
   Take the 16-bit value (Val#2a) and multiply by 2 (Val#2b) to get a byte offset.
   Add 260000 to Val#2b to get a RAM byte offset. Val#3
   Store (Val #3) at 0x60F956C
   Store Val#1a, the original word offset, at address 0x60F95A2 <-- not sure why
   The script pointer is now updated to Val#3
   Return
}
==================================



==================================
Subroutine  060BBB1C (Called a lot)
==================================
Increment script pointer (0x60F956C) by 2 bytes (1 Word location)

L1: Increment script pointer (0x60F956C) by 2 bytes (1 Word location)
Read the value at this script location (Script_1).  This is put in r2.
IF(Script_1 is not 0){
   Goto L1
}
ELSE{
    It is 0
    Increment script pointer (0x60F956C) by 2 bytes (1 Word location)
    Return the # of times the loop occurred

}

A count was kept of the number of times SCRIPT_1 was non-zero

Next the second parameter, the bit offset, is taken and divided by 8 (using integer division) to obtain a byte offset.
This byte offset is added to 0x21F800 to obtain an address of interest.
One byte is read from this location and stored in r2.
Next the second parameter is again divided by 8, however the remainder is determined and stored in r0
The value stored in r2 is then shifted right by the value of the remainder.  This leaves the bit of interest in bit 0.
The bit of interest is tested against 0x1. If it equals 1, then the file pointer proceeds to the
one given by parameter #1, otherwise, the file pointer advances 1 wd in the script file.
If using the word offset, place to jump is calculated in the following manner: 
(Offset Byte Address = 0x26000 + 2*Arg1_WdOffset.  Then read the wd at this address, mutiply by 2 and add to 0x260000.  This is where you jump to!)

Example:
Parameter #1 holds 0x12E
0x12E * 2 = 0x25C + 0x260000 = 0x26025C
0x2625C contains 0x26E6
0x26E6 * 2 + 0x260000 = 264DCC



==================================
Subroutine  060BA9C0 (Text Draw)
==================================







